name: Deploy to AWS Fargate

on:
  push:
    branches:
      - production

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate Docker image tag based on app hash
      id: hash
      run: |
        cd chat-app
        APP_HASH=$(find . -type f -exec sha1sum {} \; | sha1sum | cut -d' ' -f1)
        echo "APP_HASH=$APP_HASH" >> $GITHUB_ENV
        echo "IMAGE_TAG=$APP_HASH" >> $GITHUB_ENV
        echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$APP_HASH" >> $GITHUB_ENV

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ env.IMAGE_TAG }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Install dependencies and build app
      run: |
        cd chat-app
        npm i
        npm run build

    - name: Build and push Docker image to ECR
      uses: docker/build-push-action@v5
      with:
        context: ./chat-app
        push: true
        tags: ${{ env.IMAGE_URI }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    - name: Move new cache for next build
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Debug task definition value
      run: |
        echo "Using ECS Task Definition: ${{ env.ECS_TASK_DEFINITION }}"   

    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: chat-app
        image: ${{ env.IMAGE_URI }}

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        task-definition: ${{ steps.task-def.outputs.task-definition }}
